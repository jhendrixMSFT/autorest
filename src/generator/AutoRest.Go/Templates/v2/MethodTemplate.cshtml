@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Go
@using AutoRest.Go.Model

@inherits AutoRest.Core.Template<AutoRest.Go.Model.MethodGo>

@{
    var opIdCamelCase = Model.Name.ToCamelCase();
}

@WrapComment("// ", Model.Name + " " + Model.Description.ToSentence())
@if (Model.LocalParameters.Count() > 0)
{
@://
@WrapComment("// ", Model.ParametersDocumentation)
}

func (client @(Model.Owner)) @(Model.MethodSignature) (@Model.MethodReturnSignature(false)) {
@if (Model.ParameterValidations.Length > 0)
{
    @:if err := validation.Validate([]validation.Validation{
    @:@(Model.ParameterValidations)}); err != nil {
    @:return result, @(Model.ValidationError)
@:}
@:@EmptyLine
}
	req, err := client.@(opIdCamelCase)Preparer()
	if err != nil {
		return
	}

	resp, err := client.RequestPolicyManager().InvokeRequest(ctx, requestpolicy.ResponderPolicyFactory{Responder: client.@(opIdCamelCase)Responder}, req)
	if err == nil {
		result = resp.(@(Model.MethodReturnType))
	} else {
		result.rawResponse = resp.Response()
	}

	return
}

@EmptyLine
// @(opIdCamelCase)Preparer prepares the @(Model.Name) request.
func (client @(Model.Owner)) @(opIdCamelCase)Preparer(@(Model.MethodParametersSignature)) (req requestpolicy.Request, err error) {
	req, err = requestpolicy.NewRequest("@(Model.HttpMethod.ToString().ToUpperInvariant())", *client.url, requestpolicy.NewRequestOptions{})
	if err != nil {
		return
	}

    params := req.URL.Query()
@foreach(var qp in Model.QueryParameters)
{
    if (qp.IsRequired)
    {
    @:params.Add("@(qp.Name)", @(qp.DefaultValue))
    }
    else
    {
    @:if @qp.Name != nil {
        @:params.Add("@(qp.Name)", *@(qp.Name))
    @:}
    }
}

@foreach (var hp in Model.HeaderParameters)
{
    if (hp.IsRequired)
    {
    @:req.AddHeader("@(hp.SerializedName)", @(hp.Name))
    }
    else
    {
    @:if @hp.Name != nil && len(*@(hp.Name)) != 0 {
        @:req.AddHeader("@(hp.SerializedName)", *@hp.Name)
    @:}
    }
}
	req.URL.RawQuery = params.Encode()
	return
}

@EmptyLine
// @(opIdCamelCase)Responder handles the response to the @(Model.Name) request. The method always
// closes the http.Response Body.
func (client @(Model.Owner)) @(opIdCamelCase)Responder(resp requestpolicy.Response) (requestpolicy.Response, error) { 
	if err := requestpolicy.ValidateResponse(resp, @(string.Join(",", Model.ResponseCodes.ToArray()))); err != nil {
		return resp, err
	}

	result := @(Model.MethodReturnType){rawResponse: resp.Response()}
@if (Model.ReturnValueRequiresUnmarshalling())
{
    @:err := autorest.UnmarshalXML(resp.Response(), &result)
    @:if err != nil {
        @:return resp, err
    @:}
}
	return result, nil
}
